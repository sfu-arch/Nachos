##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################


##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS := 

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS :=

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
#TOOL_ROOTS :=new-trace-gen DSTrace  trace_generator  xed_extractor opcodemix 
#TOOL_ROOTS :=new-trace-gen   
TOOL_ROOTS := MemTrace 
COMPONENT_INCLUDES := $(TOOLS_ROOT)/InstLib 
#TOOL_LIBS += $(TOOLS_ROOT)/InstLib/obj-intel64/controller.a
#APP_LPATHS := $(TOOLS_ROOT)/InstLib
# TOOL_LIBS +=-lz
TOOL_LPATH+=/lib/x86_64-linux-gnu/
# TOOL_LPATH+=/p-ssd/modules/zlib-1.2.8-gcc5/lib

# This defines all the applications that will be run during the tests.
APP_ROOTS :=controller_manager 

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS := oper_imm_asm bsr_bsf_asm

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS :=

TOOL_CXXFLAGS+=-std=c++11
###### Place architecture-specific definitions here ######

# Place ia32-specific definitions here if they apply to all supported operating systems.
ifeq ($(TARGET),ia32)
    TEST_TOOL_ROOTS += 
endif

# Place intel64-specific definitions here if they apply to all supported operating systems.
ifeq ($(TARGET),intel64)
    TEST_TOOL_ROOTS += 
endif

###### Place OS-specific definitions here ######

# Linux
ifeq ($(TARGET_OS),linux)
    TEST_ROOTS += get_source_location_gnu_debug
    APP_ROOTS += 
    ifeq ($(TARGET),intel64)
        TEST_TOOL_ROOTS += 
    endif
endif

###### Handle exceptions here ######

# TODO: These tests fail on KNC - fix and remove the following:
# for get_source_location see Mantis 2960
ifeq ($(TARGET),mic)
    TEST_TOOL_ROOTS := $(filter-out get_source_location, $(TEST_TOOL_ROOTS))
    TEST_ROOTS := $(filter-out get_source_location_gnu_debug, $(TEST_ROOTS))
    APP_ROOTS := $(filter-out get_source_app get_source_app_gnu_debug, $(APP_ROOTS))
endif

ifeq ($(TARGET),mic)
    TEST_TOOL_ROOTS := $(filter-out oper-imm, $(TEST_TOOL_ROOTS))
    APP_ROOTS := $(filter-out oper_imm_app, $(APP_ROOTS))
    OBJECT_ROOTS := $(filter-out oper_imm_asm, $(OBJECT_ROOTS))
endif

###### Define the sanity subset ######

# This defines the list of tests that should run in sanity. It should include all the tests listed in
# TEST_TOOL_ROOTS and TEST_ROOTS excluding only unstable tests.
SANITY_SUBSET := $(TEST_TOOL_ROOTS) $(TEST_ROOTS)


#
# Build rules
#
##############################################################

# This section contains the build rules for all binaries that have special build rules.
# See makefile.default.rules for the default build rules.

###### Special tools' build rules ######

$(OBJDIR)MemTrace$(PINTOOL_SUFFIX): $(OBJDIR)MemTrace$(OBJ_SUFFIX) $(CONTROLLERLIB)
	$(LINKER) $(TOOL_LDFLAGS) $(LINK_EXE)$@ $^ $(TOOL_LPATHS) $(TOOL_LIBS)

$(OBJDIR)DSTrace$(PINTOOL_SUFFIX): $(OBJDIR)DSTrace$(OBJ_SUFFIX) $(CONTROLLERLIB)
	$(LINKER) $(TOOL_LDFLAGS) $(LINK_EXE)$@ $^ $(TOOL_LPATHS) $(TOOL_LIBS)

$(OBJDIR)new-trace-gen$(PINTOOL_SUFFIX): $(OBJDIR)new-trace-gen$(OBJ_SUFFIX) $(CONTROLLERLIB)
	$(LINKER) $(TOOL_LDFLAGS) $(LINK_EXE)$@ $^ $(TOOL_LPATHS) $(TOOL_LIBS)

$(OBJDIR)trace_generator$(PINTOOL_SUFFIX): $(OBJDIR)trace_generator$(OBJ_SUFFIX) $(CONTROLLERLIB)
	$(LINKER) $(TOOL_LDFLAGS) $(LINK_EXE)$@ $^ $(TOOL_LPATHS) $(TOOL_LIBS)

$(OBJDIR)opcodemix$(PINTOOL_SUFFIX): $(OBJDIR)opcodemix$(OBJ_SUFFIX) $(CONTROLLERLIB)
	$(LINKER) $(TOOL_LDFLAGS) $(LINK_EXE)$@ $^ $(TOOL_LPATHS) $(TOOL_LIBS)

$(OBJDIR)regval$(PINTOOL_SUFFIX): $(OBJDIR)regval$(OBJ_SUFFIX) $(REGVALLIB)
	$(LINKER) $(TOOL_LDFLAGS) $(LINK_EXE)$@ $^ $(TOOL_LPATHS) $(TOOL_LIBS)

###### Special applications' build rules ######

$(OBJDIR)get_source_app$(EXE_SUFFIX): get_source_app.cpp
	$(APP_CXX) $(APP_CXXFLAGS_NOOPT) $(DBG_INFO_CXX_ALWAYS) $(COMP_EXE)$@ $< $(APP_LDFLAGS_NOOPT) $(APP_LIBS) \
	  $(CXX_LPATHS) $(CXX_LIBS) $(DBG_INFO_LD_ALWAYS)

$(OBJDIR)get_source_app_gnu_debug$(EXE_SUFFIX): $(OBJDIR)get_source_app$(EXE_SUFFIX)
	$(CP) $(OBJDIR)get_source_app$(EXE_SUFFIX) $(OBJDIR)get_source_app_gnu_debug$(EXE_SUFFIX)
	$(OBJCOPY) --only-keep-debug $(OBJDIR)get_source_app_gnu_debug$(EXE_SUFFIX) $(OBJDIR)get_source_app_gnu_debug.dbg
	$(OBJCOPY) --strip-debug $(OBJDIR)get_source_app_gnu_debug$(EXE_SUFFIX)
	$(OBJCOPY) --add-gnu-debuglink=$(OBJDIR)get_source_app_gnu_debug.dbg $(OBJDIR)get_source_app_gnu_debug$(EXE_SUFFIX)

# This application needs to be compiled without optimizations for the placeholder functions to be available to the tool.
$(OBJDIR)regval_app$(EXE_SUFFIX): regval_app.cpp
	$(APP_CXX) $(APP_CXXFLAGS_NOOPT) $(COMP_EXE)$@ $< $(APP_LDFLAGS_NOOPT) $(APP_LIBS) $(CXX_LPATHS) $(CXX_LIBS)


