#!/usr/bin/python

import collections
import sys
import z3
import networkx as nx


def getCond(CFG, n, p, conds):
    if 'S1' not in CFG.node[p].keys():
        return z3.BoolVal(True)

    if CFG.node[p]['S0'] == str(n):
        return conds[p]
    else:
        return z3.Not(conds[p])


def countTerms(condition):
    worklist = collections.deque([condition])
    seen     = set([worklist[0].get_id()])
    count    = 0
    non_vars = frozenset(['true', 'false', 'not', 'and', 'or'])

    while worklist:
        expr = worklist.popleft()
        assert z3.is_app(expr)

        if expr.decl().name() in non_vars:
            for index in range(expr.num_args()):
                child = expr.arg(index)
                id    = child.get_id()
                if id not in seen:
                    seen.add(id)
                    worklist.append(child)
        else:
            count += 1

    return count


def forwardBranchRemoval(CFG):
    """
    Remove forward branches by applying if-conversion.
    Each basic block has a predicate and a condition. 
    If the block is terminated by a conditional branch the 
    For block B_n, which is the target of the True condition
    the predicate for the block is computed as P_{n-1} & C_{n-1}.
    At merge points the predicate is computed as the disjunction 
    of all incoming predicate and condition conjunctions of 
    predecessors.
    """

    nodes = nx.algorithms.topological_sort(CFG)

    conds = {}
    # Initialize node to conditions map, the symbol is the condition
    # for each block. The predicate for each block is computed from
    # the condition of its predecessors.     
    for k,v in zip(nodes, z3.Bools(nodes)):
        conds[k] = v
   
    preds = {}
    # Use a symbolic version of True to represent the fact that
    # the predicate for the entry block to the function is always 
    # true. The predicate for the
    # entry block is always True.

    preds[nodes[0]] = z3.BoolVal(True)

    # Compute predicates
    for n in nodes[1:]:
        preds[n] = z3.BoolVal(False)
        for p in CFG.predecessors(n):
            preds[n] = z3.Or(preds[n], z3.And(preds[p], getCond(CFG, n, p, conds)))

    print
    print "Predicates - Simplified"
    for n in nodes:
        simplified = z3.Then('simplify', 'ctx-solver-simplify')(preds[n]).as_expr()
        print CFG.node[n]['label'], countTerms(simplified)
        
    

def main(filename):
    CFG = nx.DiGraph(nx.drawing.nx_agraph.read_dot(filename))
    assert nx.algorithms.is_directed_acyclic_graph(CFG) 
    for n in CFG.nodes():
        assert CFG.out_degree(n) <= 2
    forwardBranchRemoval(CFG) 


if __name__ == "__main__":
    main(sys.argv[1])
